{"name":"Patika","tagline":"Patika is a routing package which you don't have to define the routes.","body":"## Why?\r\nThere are a lot of cool routing packages in PHP World. But you have to define all routes that you need it. But sometimes like creating an API, it is time waste. When you use the Patika, you don't have to define any route. All routes are parsed by the Patika according to your Controller definitions. \r\n\r\n## For Example\r\n\r\n##### 1. Simple Routing\r\n\r\n```\r\nGET localhost/users/all    \r\n# Namespace: App/Controllers/Users\r\n# Method: all\r\n# Arguments: []\r\n```\r\n##### 2. Long Routing\r\n\r\n```\r\nGET localhost/admin/manager/users/all\r\n# Namespace: App/Controllers/Admin/Manage/Users\r\n# Method: all\r\n# Arguments: []\r\n```\r\n##### 3. Routing with Arguments\r\n```\r\nGET localhost/admin/manage/users/get/1 \r\n# Namespace: App/Controllers/Admin/Manage/Users\r\n# Method: get\r\n# Arguments: [1]\r\n```\r\n\r\n```php\r\nnamespace App\\Controllers\\Admin\\Manage;\r\n\r\nclass Users {\r\n\r\n    public function get($id)\r\n    {\r\n        echo $id;\r\n    }\r\n\r\n}\r\n```\r\n\r\n##### 4. Routing with Multiple Arguments\r\n\r\n```\r\nGET localhost/admin/manage/users/getByArgument/1/2/3/foo/bar \r\n# Namespace: App/Controllers/Admin/Manage/Users\r\n# Method: get\r\n# Arguments: [1, 2, 3, 'foo', 'bar']\r\n```\r\n\r\n```php\r\nnamespace App\\Controllers\\Admin\\Manage;\r\n\r\nclass Users {\r\n\r\n    public function get($one, $two, $three, $foo, $bar)\r\n    {\r\n        echo $id;\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Installation\r\n\r\nTo install through composer, simply put the following in your `composer.json` file:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"ozziest/patika\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\n```\r\n$ composer update\r\n```\r\n\r\n## Configurations\r\n\r\nFirst of all, you should define `.htaccess` file so that handle all request and send it to `index.php` file. \r\n\r\n`.htaccess`\r\n```\r\nRewriteEngine on\r\nRewriteCond $1 !^(index\\.php|images|robots\\.txt)\r\nRewriteRule ^(.*)$ /index.php/$1 [L]\r\n```\r\n\r\n`index.php` file must be defined like this;\r\n\r\n```php \r\n// Including composer autoload file\r\ninclude 'vendor/autoload.php';\r\n\r\n// First of all, you should use try-catch block for handling routing errors\r\ntry {\r\n    // You must create a new instance of Manager Class with the app argument.\r\n    $patika = new Ozziest\\Patika\\Manager(['app' => 'App\\Controllers']);\r\n    // And calling the route!\r\n    $patika->call();\r\n} catch (Ozziest\\Patika\\Exceptions\\PatikaException $e) {\r\n    // If the controller or method aren't found, you can handle the error.\r\n    echo $e->getMessage();\r\n}\r\n```\r\n\r\nThat's all! **Patika Router** is active now. Now, you can define your controller which what you want.\r\n\r\n## Exceptions\r\n\r\n- Ozziest\\Patika\\Exceptions\\ **PatikaException** (extended from \\Exception)\r\n    - Ozziest\\Patika\\Exceptions\\ **ControllerNotFoundException**\r\n    - Ozziest\\Patika\\Exceptions\\ **MethodNotFoundException**\r\n\r\n### Authors and Contributors\r\n- Ozgur Adem Isikli (@ozziest)\r\n\r\n### Support or Contact\r\nHaving trouble with The Patika? Check out our [issue page](https://github.com/ozziest/patika/issues) and weâ€™ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}